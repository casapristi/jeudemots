import a from"../data/words.json"assert{type:"json"};import b from"./Translator.js";export default class c{constructor(a){let c=new b;this.word=a,this.wordComp=c.phonems(a),this.syllabes=c.syllabes(a),this.sounds=this.wordComp.map(a=>a.sound).join(":")}rs(a){return a.filter(a=>"NPH"!==a.sound)}rss(a){return a.split(":").filter(a=>"NPH"!==a).join(":")}rls(b){let a=[...b];return"NPH"===a[a.length-1].sound&&a.pop(),a}including(){let b=a.filter(a=>a.comp.includes(this.rss(this.sounds))&&a.comp!==this.sounds);return b.map(a=>({phonetic:a.phonetic,word:a.word,comp:a.comp}))}starting(){let b=[];for(let c=0;c<this.wordComp.length-2;c++){let d=this.rs(this.wordComp).slice(c+1),e=d.length;b=[...a.filter(a=>a.comp.startsWith(d.map(a=>a.sound).join(":"))&&!b.find(b=>this.rss(a.comp)===this.rss(b.comp))).map(a=>({phonetic:[...this.rls(this.wordComp),...a.phonetic.slice(e)],word:a.word,comp:a.comp})),...b]}return b}ending(){let b=[];for(let c=0;c<this.wordComp.length-2;c++){let d=this.rs(this.wordComp).slice(0,-c-1),e=d.length;b=[...a.filter(a=>this.rss(a.comp).endsWith(d.map(a=>a.sound).join(":"))&&!b.find(b=>this.rss(a.comp)===this.rss(b.comp))).map(a=>({phonetic:[...this.rls(a.phonetic).slice(0,-e),...this.wordComp],word:a.word,comp:a.comp})),...b]}return b}ryhme(){let b=this.syllabes[this.syllabes.length-1],c=this.rss(b.sound.join(":")).split(":"),e=c[c.length-1],d=a.filter(b=>{let a=this.rss(b.comp).split(":");return a[a.length-1]===e});return{words:d,last:b,syllabes:this.syllabes}}}
